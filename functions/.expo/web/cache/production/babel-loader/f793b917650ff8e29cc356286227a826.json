{"ast":null,"code":"'use strict';exports.randomBytes=exports.rng=exports.pseudoRandomBytes=exports.prng=require('randombytes');exports.createHash=exports.Hash=require('create-hash');exports.createHmac=exports.Hmac=require('create-hmac');var algos=require('browserify-sign/algos');var algoKeys=Object.keys(algos);var hashes=['sha1','sha224','sha256','sha384','sha512','md5','rmd160'].concat(algoKeys);exports.getHashes=function(){return hashes;};var p=require('pbkdf2');exports.pbkdf2=p.pbkdf2;exports.pbkdf2Sync=p.pbkdf2Sync;var aes=require('browserify-cipher');exports.Cipher=aes.Cipher;exports.createCipher=aes.createCipher;exports.Cipheriv=aes.Cipheriv;exports.createCipheriv=aes.createCipheriv;exports.Decipher=aes.Decipher;exports.createDecipher=aes.createDecipher;exports.Decipheriv=aes.Decipheriv;exports.createDecipheriv=aes.createDecipheriv;exports.getCiphers=aes.getCiphers;exports.listCiphers=aes.listCiphers;var dh=require('diffie-hellman');exports.DiffieHellmanGroup=dh.DiffieHellmanGroup;exports.createDiffieHellmanGroup=dh.createDiffieHellmanGroup;exports.getDiffieHellman=dh.getDiffieHellman;exports.createDiffieHellman=dh.createDiffieHellman;exports.DiffieHellman=dh.DiffieHellman;var sign=require('browserify-sign');exports.createSign=sign.createSign;exports.Sign=sign.Sign;exports.createVerify=sign.createVerify;exports.Verify=sign.Verify;exports.createECDH=require('create-ecdh');var publicEncrypt=require('public-encrypt');exports.publicEncrypt=publicEncrypt.publicEncrypt;exports.privateEncrypt=publicEncrypt.privateEncrypt;exports.publicDecrypt=publicEncrypt.publicDecrypt;exports.privateDecrypt=publicEncrypt.privateDecrypt;var rf=require('randomfill');exports.randomFill=rf.randomFill;exports.randomFillSync=rf.randomFillSync;exports.createCredentials=function(){throw new Error(['sorry, createCredentials is not implemented yet','we accept pull requests','https://github.com/crypto-browserify/crypto-browserify'].join('\\n'));};exports.constants={'DH_CHECK_P_NOT_SAFE_PRIME':2,'DH_CHECK_P_NOT_PRIME':1,'DH_UNABLE_TO_CHECK_GENERATOR':4,'DH_NOT_SUITABLE_GENERATOR':8,'NPN_ENABLED':1,'ALPN_ENABLED':1,'RSA_PKCS1_PADDING':1,'RSA_SSLV23_PADDING':2,'RSA_NO_PADDING':3,'RSA_PKCS1_OAEP_PADDING':4,'RSA_X931_PADDING':5,'RSA_PKCS1_PSS_PADDING':6,'POINT_CONVERSION_COMPRESSED':2,'POINT_CONVERSION_UNCOMPRESSED':4,'POINT_CONVERSION_HYBRID':6};","map":{"version":3,"sources":["/usr/local/lib/node_modules/expo-cli/node_modules/crypto-browserify/index.js"],"names":["exports","randomBytes","rng","pseudoRandomBytes","prng","require","createHash","Hash","createHmac","Hmac","algos","algoKeys","Object","keys","hashes","concat","getHashes","p","pbkdf2","pbkdf2Sync","aes","Cipher","createCipher","Cipheriv","createCipheriv","Decipher","createDecipher","Decipheriv","createDecipheriv","getCiphers","listCiphers","dh","DiffieHellmanGroup","createDiffieHellmanGroup","getDiffieHellman","createDiffieHellman","DiffieHellman","sign","createSign","Sign","createVerify","Verify","createECDH","publicEncrypt","privateEncrypt","publicDecrypt","privateDecrypt","rf","randomFill","randomFillSync","createCredentials","Error","join","constants"],"mappings":"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","sourcesContent":["'use strict'\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\nexports.createHash = exports.Hash = require('create-hash')\nexports.createHmac = exports.Hmac = require('create-hmac')\n\nvar algos = require('browserify-sign/algos')\nvar algoKeys = Object.keys(algos)\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)\nexports.getHashes = function () {\n  return hashes\n}\n\nvar p = require('pbkdf2')\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\nvar aes = require('browserify-cipher')\n\nexports.Cipher = aes.Cipher\nexports.createCipher = aes.createCipher\nexports.Cipheriv = aes.Cipheriv\nexports.createCipheriv = aes.createCipheriv\nexports.Decipher = aes.Decipher\nexports.createDecipher = aes.createDecipher\nexports.Decipheriv = aes.Decipheriv\nexports.createDecipheriv = aes.createDecipheriv\nexports.getCiphers = aes.getCiphers\nexports.listCiphers = aes.listCiphers\n\nvar dh = require('diffie-hellman')\n\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup\nexports.getDiffieHellman = dh.getDiffieHellman\nexports.createDiffieHellman = dh.createDiffieHellman\nexports.DiffieHellman = dh.DiffieHellman\n\nvar sign = require('browserify-sign')\n\nexports.createSign = sign.createSign\nexports.Sign = sign.Sign\nexports.createVerify = sign.createVerify\nexports.Verify = sign.Verify\n\nexports.createECDH = require('create-ecdh')\n\nvar publicEncrypt = require('public-encrypt')\n\nexports.publicEncrypt = publicEncrypt.publicEncrypt\nexports.privateEncrypt = publicEncrypt.privateEncrypt\nexports.publicDecrypt = publicEncrypt.publicDecrypt\nexports.privateDecrypt = publicEncrypt.privateDecrypt\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar rf = require('randomfill')\n\nexports.randomFill = rf.randomFill\nexports.randomFillSync = rf.randomFillSync\n\nexports.createCredentials = function () {\n  throw new Error([\n    'sorry, createCredentials is not implemented yet',\n    'we accept pull requests',\n    'https://github.com/crypto-browserify/crypto-browserify'\n  ].join('\\n'))\n}\n\nexports.constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n}\n"]},"metadata":{},"sourceType":"script"}