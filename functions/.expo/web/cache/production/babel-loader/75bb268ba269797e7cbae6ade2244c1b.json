{"ast":null,"code":"\"use strict\";var _inherits=require(\"@babel/runtime/helpers/inherits\");var _possibleConstructorReturn=require(\"@babel/runtime/helpers/possibleConstructorReturn\");var _getPrototypeOf=require(\"@babel/runtime/helpers/getPrototypeOf\");var _wrapNativeSuper=require(\"@babel/runtime/helpers/wrapNativeSuper\");var _toArray=require(\"@babel/runtime/helpers/toArray\");var _extends=require(\"@babel/runtime/helpers/extends\");var _regeneratorRuntime=require(\"@babel/runtime/regenerator\");var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _createForOfIteratorHelperLoose(o){var i=0;if(typeof Symbol===\"undefined\"||o[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]==null){if(Array.isArray(o)||(o=_unsupportedIterableToArray(o)))return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}i=o[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]();return i.next.bind(i);}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator[\"throw\"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};Object.defineProperty(exports,\"__esModule\",{value:true});var assert=require(\"assert\");var node_fetch_1=require(\"node-fetch\");var promiseLimit=require(\"promise-limit\");var zlib=require(\"zlib\");var BASE_URL='https://exp.host';var BASE_API_URL=BASE_URL+\"/--/api/v2\";var PUSH_NOTIFICATION_CHUNK_LIMIT=100;var PUSH_NOTIFICATION_RECEIPT_CHUNK_LIMIT=300;var DEFAULT_CONCURRENT_REQUEST_LIMIT=6;var Expo=function(){function Expo(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Expo);this.httpAgent=options.httpAgent;this.limitConcurrentRequests=promiseLimit(options.maxConcurrentRequests!=null?options.maxConcurrentRequests:DEFAULT_CONCURRENT_REQUEST_LIMIT);}_createClass(Expo,[{key:\"sendPushNotificationsAsync\",value:function sendPushNotificationsAsync(messages){return __awaiter(this,void 0,void 0,_regeneratorRuntime.mark(function _callee(){var actualMessagesCount,data,apiError;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:actualMessagesCount=Expo._getActualMessageCount(messages);_context.next=3;return this.requestAsync(BASE_API_URL+\"/push/send\",{httpMethod:'post',body:messages,shouldCompress:function shouldCompress(body){return body.length>1024;}});case 3:data=_context.sent;if(!(!Array.isArray(data)||data.length!==actualMessagesCount)){_context.next=8;break;}apiError=new Error(\"Expected Expo to respond with \"+actualMessagesCount+\" \"+(actualMessagesCount===1?'ticket':'tickets')+\" but got \"+data.length);apiError.data=data;throw apiError;case 8:return _context.abrupt(\"return\",data);case 9:case\"end\":return _context.stop();}}},_callee,this);}));}},{key:\"getPushNotificationReceiptsAsync\",value:function getPushNotificationReceiptsAsync(receiptIds){return __awaiter(this,void 0,void 0,_regeneratorRuntime.mark(function _callee2(){var data,apiError;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return this.requestAsync(BASE_API_URL+\"/push/getReceipts\",{httpMethod:'post',body:{ids:receiptIds},shouldCompress:function shouldCompress(body){return body.length>1024;}});case 2:data=_context2.sent;if(!(!data||typeof data!=='object'||Array.isArray(data))){_context2.next=7;break;}apiError=new Error(\"Expected Expo to respond with a map from receipt IDs to receipts but received data of another type\");apiError.data=data;throw apiError;case 7:return _context2.abrupt(\"return\",data);case 8:case\"end\":return _context2.stop();}}},_callee2,this);}));}},{key:\"chunkPushNotifications\",value:function chunkPushNotifications(messages){var chunks=[];var chunk=[];var chunkMessagesCount=0;for(var _iterator=_createForOfIteratorHelperLoose(messages),_step;!(_step=_iterator()).done;){var message=_step.value;if(Array.isArray(message.to)){var partialTo=[];for(var _iterator2=_createForOfIteratorHelperLoose(message.to),_step2;!(_step2=_iterator2()).done;){var recipient=_step2.value;partialTo.push(recipient);chunkMessagesCount++;if(chunkMessagesCount>=PUSH_NOTIFICATION_CHUNK_LIMIT){chunk.push(_extends(_extends({},message),{to:partialTo}));chunks.push(chunk);chunk=[];chunkMessagesCount=0;partialTo=[];}}if(partialTo.length){chunk.push(_extends(_extends({},message),{to:partialTo}));}}else{chunk.push(message);chunkMessagesCount++;}if(chunkMessagesCount>=PUSH_NOTIFICATION_CHUNK_LIMIT){chunks.push(chunk);chunk=[];chunkMessagesCount=0;}}if(chunkMessagesCount){chunks.push(chunk);}return chunks;}},{key:\"chunkPushNotificationReceiptIds\",value:function chunkPushNotificationReceiptIds(receiptIds){return this.chunkItems(receiptIds,PUSH_NOTIFICATION_RECEIPT_CHUNK_LIMIT);}},{key:\"chunkItems\",value:function chunkItems(items,chunkSize){var chunks=[];var chunk=[];for(var _iterator3=_createForOfIteratorHelperLoose(items),_step3;!(_step3=_iterator3()).done;){var item=_step3.value;chunk.push(item);if(chunk.length>=chunkSize){chunks.push(chunk);chunk=[];}}if(chunk.length){chunks.push(chunk);}return chunks;}},{key:\"requestAsync\",value:function requestAsync(url,options){return __awaiter(this,void 0,void 0,_regeneratorRuntime.mark(function _callee3(){var _this=this;var requestBody,sdkVersion,requestHeaders,json,response,apiError,textBody,result,_apiError,_apiError2;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:sdkVersion=require(\"../package.json\").version;requestHeaders=new node_fetch_1.Headers({Accept:'application/json','Accept-Encoding':'gzip, deflate','User-Agent':\"expo-server-sdk-node/\"+sdkVersion});if(!(options.body!=null)){_context3.next=14;break;}json=JSON.stringify(options.body);assert(json!=null,\"JSON request body must not be null\");if(!options.shouldCompress(json)){_context3.next=12;break;}_context3.next=8;return gzipAsync(Buffer.from(json));case 8:requestBody=_context3.sent;requestHeaders.set('Content-Encoding','gzip');_context3.next=13;break;case 12:requestBody=json;case 13:requestHeaders.set('Content-Type','application/json');case 14:_context3.next=16;return this.limitConcurrentRequests(function(){return node_fetch_1.default(url,{method:options.httpMethod,body:requestBody,headers:requestHeaders,agent:_this.httpAgent});});case 16:response=_context3.sent;if(!(response.status!==200)){_context3.next=22;break;}_context3.next=20;return this.parseErrorResponseAsync(response);case 20:apiError=_context3.sent;throw apiError;case 22:_context3.next=24;return response.text();case 24:textBody=_context3.sent;_context3.prev=25;result=JSON.parse(textBody);_context3.next=35;break;case 29:_context3.prev=29;_context3.t0=_context3[\"catch\"](25);_context3.next=33;return this.getTextResponseErrorAsync(response,textBody);case 33:_apiError=_context3.sent;throw _apiError;case 35:if(!result.errors){_context3.next=38;break;}_apiError2=this.getErrorFromResult(result);throw _apiError2;case 38:return _context3.abrupt(\"return\",result.data);case 39:case\"end\":return _context3.stop();}}},_callee3,this,[[25,29]]);}));}},{key:\"parseErrorResponseAsync\",value:function parseErrorResponseAsync(response){return __awaiter(this,void 0,void 0,_regeneratorRuntime.mark(function _callee4(){var textBody,result,apiError;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return response.text();case 2:textBody=_context4.sent;_context4.prev=3;result=JSON.parse(textBody);_context4.next=12;break;case 7:_context4.prev=7;_context4.t0=_context4[\"catch\"](3);_context4.next=11;return this.getTextResponseErrorAsync(response,textBody);case 11:return _context4.abrupt(\"return\",_context4.sent);case 12:if(!(!result.errors||!Array.isArray(result.errors)||!result.errors.length)){_context4.next=18;break;}_context4.next=15;return this.getTextResponseErrorAsync(response,textBody);case 15:apiError=_context4.sent;apiError.errorData=result;return _context4.abrupt(\"return\",apiError);case 18:return _context4.abrupt(\"return\",this.getErrorFromResult(result));case 19:case\"end\":return _context4.stop();}}},_callee4,this,[[3,7]]);}));}},{key:\"getTextResponseErrorAsync\",value:function getTextResponseErrorAsync(response,text){return __awaiter(this,void 0,void 0,_regeneratorRuntime.mark(function _callee5(){var apiError;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:apiError=new Error(\"Expo responded with an error with status code \"+response.status+\": \"+text);apiError.statusCode=response.status;apiError.errorText=text;return _context5.abrupt(\"return\",apiError);case 4:case\"end\":return _context5.stop();}}},_callee5);}));}},{key:\"getErrorFromResult\",value:function getErrorFromResult(result){var _this2=this;assert(result.errors&&result.errors.length>0,\"Expected at least one error from Expo\");var _result$errors=_toArray(result.errors),errorData=_result$errors[0],otherErrorData=_result$errors.slice(1);var error=this.getErrorFromResultError(errorData);if(otherErrorData.length){error.others=otherErrorData.map(function(data){return _this2.getErrorFromResultError(data);});}return error;}},{key:\"getErrorFromResultError\",value:function getErrorFromResultError(errorData){var error=new Error(errorData.message);error.code=errorData.code;if(errorData.details!=null){error.details=errorData.details;}if(errorData.stack!=null){error.serverStack=errorData.stack;}return error;}}],[{key:\"isExpoPushToken\",value:function isExpoPushToken(token){return typeof token==='string'&&((token.startsWith('ExponentPushToken[')||token.startsWith('ExpoPushToken['))&&token.endsWith(']')||/^[a-z\\d]{8}-[a-z\\d]{4}-[a-z\\d]{4}-[a-z\\d]{4}-[a-z\\d]{12}$/i.test(token));}},{key:\"_getActualMessageCount\",value:function _getActualMessageCount(messages){return messages.reduce(function(total,message){if(Array.isArray(message.to)){total+=message.to.length;}else{total++;}return total;},0);}}]);return Expo;}();exports.Expo=Expo;Expo.pushNotificationChunkSizeLimit=PUSH_NOTIFICATION_CHUNK_LIMIT;Expo.pushNotificationReceiptChunkSizeLimit=PUSH_NOTIFICATION_RECEIPT_CHUNK_LIMIT;exports.default=Expo;function gzipAsync(data){return new Promise(function(resolve,reject){zlib.gzip(data,function(error,result){if(error){reject(error);}else{resolve(result);}});});}var ExtensibleError=function(_Error){_inherits(ExtensibleError,_Error);var _super=_createSuper(ExtensibleError);function ExtensibleError(){_classCallCheck(this,ExtensibleError);return _super.apply(this,arguments);}return ExtensibleError;}(_wrapNativeSuper(Error));","map":{"version":3,"sources":["../src/ExpoClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * expo-server-sdk\n *\n * Use this if you are running Node on your server backend when you are working with Expo\n * https://expo.io\n */\nconst assert = require(\"assert\");\nconst node_fetch_1 = require(\"node-fetch\");\nconst promiseLimit = require(\"promise-limit\");\nconst zlib = require(\"zlib\");\nconst BASE_URL = 'https://exp.host';\nconst BASE_API_URL = `${BASE_URL}/--/api/v2`;\n/**\n * The max number of push notifications to be sent at once. Since we can't automatically upgrade\n * everyone using this library, we should strongly try not to decrease it.\n */\nconst PUSH_NOTIFICATION_CHUNK_LIMIT = 100;\n/**\n * The max number of push notification receipts to request at once.\n */\nconst PUSH_NOTIFICATION_RECEIPT_CHUNK_LIMIT = 300;\n/**\n * The default max number of concurrent HTTP requests to send at once and spread out the load,\n * increasing the reliability of notification delivery.\n */\nconst DEFAULT_CONCURRENT_REQUEST_LIMIT = 6;\n// TODO: Eventually we'll want to have developers authenticate. Right now it's not necessary because\n// push notifications are the only API we have and the push tokens are secret anyway.\nclass Expo {\n    constructor(options = {}) {\n        this.httpAgent = options.httpAgent;\n        this.limitConcurrentRequests = promiseLimit(options.maxConcurrentRequests != null\n            ? options.maxConcurrentRequests\n            : DEFAULT_CONCURRENT_REQUEST_LIMIT);\n    }\n    /**\n     * Returns `true` if the token is an Expo push token\n     */\n    static isExpoPushToken(token) {\n        return (typeof token === 'string' &&\n            (((token.startsWith('ExponentPushToken[') || token.startsWith('ExpoPushToken[')) &&\n                token.endsWith(']')) ||\n                /^[a-z\\d]{8}-[a-z\\d]{4}-[a-z\\d]{4}-[a-z\\d]{4}-[a-z\\d]{12}$/i.test(token)));\n    }\n    /**\n     * Sends the given messages to their recipients via push notifications and returns an array of\n     * push tickets. Each ticket corresponds to the message at its respective index (the nth receipt\n     * is for the nth message) and contains a receipt ID. Later, after Expo attempts to deliver the\n     * messages to the underlying push notification services, the receipts with those IDs will be\n     * available for a period of time (approximately a day).\n     *\n     * There is a limit on the number of push notifications you can send at once. Use\n     * `chunkPushNotifications` to divide an array of push notification messages into appropriately\n     * sized chunks.\n     */\n    sendPushNotificationsAsync(messages) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const actualMessagesCount = Expo._getActualMessageCount(messages);\n            let data = yield this.requestAsync(`${BASE_API_URL}/push/send`, {\n                httpMethod: 'post',\n                body: messages,\n                shouldCompress(body) {\n                    return body.length > 1024;\n                },\n            });\n            if (!Array.isArray(data) || data.length !== actualMessagesCount) {\n                let apiError = new Error(`Expected Expo to respond with ${actualMessagesCount} ${actualMessagesCount === 1 ? 'ticket' : 'tickets'} but got ${data.length}`);\n                apiError.data = data;\n                throw apiError;\n            }\n            return data;\n        });\n    }\n    getPushNotificationReceiptsAsync(receiptIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let data = yield this.requestAsync(`${BASE_API_URL}/push/getReceipts`, {\n                httpMethod: 'post',\n                body: { ids: receiptIds },\n                shouldCompress(body) {\n                    return body.length > 1024;\n                },\n            });\n            if (!data || typeof data !== 'object' || Array.isArray(data)) {\n                let apiError = new Error(`Expected Expo to respond with a map from receipt IDs to receipts but received data of another type`);\n                apiError.data = data;\n                throw apiError;\n            }\n            return data;\n        });\n    }\n    chunkPushNotifications(messages) {\n        let chunks = [];\n        let chunk = [];\n        let chunkMessagesCount = 0;\n        for (let message of messages) {\n            if (Array.isArray(message.to)) {\n                let partialTo = [];\n                for (let recipient of message.to) {\n                    partialTo.push(recipient);\n                    chunkMessagesCount++;\n                    if (chunkMessagesCount >= PUSH_NOTIFICATION_CHUNK_LIMIT) {\n                        // Cap this chunk here if it already exceeds PUSH_NOTIFICATION_CHUNK_LIMIT.\n                        // Then create a new chunk to continue on the remaining recipients for this message.\n                        chunk.push(Object.assign(Object.assign({}, message), { to: partialTo }));\n                        chunks.push(chunk);\n                        chunk = [];\n                        chunkMessagesCount = 0;\n                        partialTo = [];\n                    }\n                }\n                if (partialTo.length) {\n                    // Add remaining `partialTo` to the chunk.\n                    chunk.push(Object.assign(Object.assign({}, message), { to: partialTo }));\n                }\n            }\n            else {\n                chunk.push(message);\n                chunkMessagesCount++;\n            }\n            if (chunkMessagesCount >= PUSH_NOTIFICATION_CHUNK_LIMIT) {\n                // Cap this chunk if it exceeds PUSH_NOTIFICATION_CHUNK_LIMIT.\n                // Then create a new chunk to continue on the remaining messages.\n                chunks.push(chunk);\n                chunk = [];\n                chunkMessagesCount = 0;\n            }\n        }\n        if (chunkMessagesCount) {\n            // Add the remaining chunk to the chunks.\n            chunks.push(chunk);\n        }\n        return chunks;\n    }\n    chunkPushNotificationReceiptIds(receiptIds) {\n        return this.chunkItems(receiptIds, PUSH_NOTIFICATION_RECEIPT_CHUNK_LIMIT);\n    }\n    chunkItems(items, chunkSize) {\n        let chunks = [];\n        let chunk = [];\n        for (let item of items) {\n            chunk.push(item);\n            if (chunk.length >= chunkSize) {\n                chunks.push(chunk);\n                chunk = [];\n            }\n        }\n        if (chunk.length) {\n            chunks.push(chunk);\n        }\n        return chunks;\n    }\n    requestAsync(url, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let requestBody;\n            let sdkVersion = require('../package.json').version;\n            let requestHeaders = new node_fetch_1.Headers({\n                Accept: 'application/json',\n                'Accept-Encoding': 'gzip, deflate',\n                'User-Agent': `expo-server-sdk-node/${sdkVersion}`,\n            });\n            if (options.body != null) {\n                let json = JSON.stringify(options.body);\n                assert(json != null, `JSON request body must not be null`);\n                if (options.shouldCompress(json)) {\n                    requestBody = yield gzipAsync(Buffer.from(json));\n                    requestHeaders.set('Content-Encoding', 'gzip');\n                }\n                else {\n                    requestBody = json;\n                }\n                requestHeaders.set('Content-Type', 'application/json');\n            }\n            let response = yield this.limitConcurrentRequests(() => node_fetch_1.default(url, {\n                method: options.httpMethod,\n                body: requestBody,\n                headers: requestHeaders,\n                agent: this.httpAgent,\n            }));\n            if (response.status !== 200) {\n                let apiError = yield this.parseErrorResponseAsync(response);\n                throw apiError;\n            }\n            let textBody = yield response.text();\n            // We expect the API response body to be JSON\n            let result;\n            try {\n                result = JSON.parse(textBody);\n            }\n            catch (e) {\n                let apiError = yield this.getTextResponseErrorAsync(response, textBody);\n                throw apiError;\n            }\n            if (result.errors) {\n                let apiError = this.getErrorFromResult(result);\n                throw apiError;\n            }\n            return result.data;\n        });\n    }\n    parseErrorResponseAsync(response) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let textBody = yield response.text();\n            let result;\n            try {\n                result = JSON.parse(textBody);\n            }\n            catch (e) {\n                return yield this.getTextResponseErrorAsync(response, textBody);\n            }\n            if (!result.errors || !Array.isArray(result.errors) || !result.errors.length) {\n                let apiError = yield this.getTextResponseErrorAsync(response, textBody);\n                apiError.errorData = result;\n                return apiError;\n            }\n            return this.getErrorFromResult(result);\n        });\n    }\n    getTextResponseErrorAsync(response, text) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let apiError = new Error(`Expo responded with an error with status code ${response.status}: ` + text);\n            apiError.statusCode = response.status;\n            apiError.errorText = text;\n            return apiError;\n        });\n    }\n    /**\n     * Returns an error for the first API error in the result, with an optional `others` field that\n     * contains any other errors.\n     */\n    getErrorFromResult(result) {\n        assert(result.errors && result.errors.length > 0, `Expected at least one error from Expo`);\n        let [errorData, ...otherErrorData] = result.errors;\n        let error = this.getErrorFromResultError(errorData);\n        if (otherErrorData.length) {\n            error.others = otherErrorData.map(data => this.getErrorFromResultError(data));\n        }\n        return error;\n    }\n    /**\n     * Returns an error for a single API error\n     */\n    getErrorFromResultError(errorData) {\n        let error = new Error(errorData.message);\n        error.code = errorData.code;\n        if (errorData.details != null) {\n            error.details = errorData.details;\n        }\n        if (errorData.stack != null) {\n            error.serverStack = errorData.stack;\n        }\n        return error;\n    }\n    static _getActualMessageCount(messages) {\n        return messages.reduce((total, message) => {\n            if (Array.isArray(message.to)) {\n                total += message.to.length;\n            }\n            else {\n                total++;\n            }\n            return total;\n        }, 0);\n    }\n}\nexports.Expo = Expo;\nExpo.pushNotificationChunkSizeLimit = PUSH_NOTIFICATION_CHUNK_LIMIT;\nExpo.pushNotificationReceiptChunkSizeLimit = PUSH_NOTIFICATION_RECEIPT_CHUNK_LIMIT;\nexports.default = Expo;\nfunction gzipAsync(data) {\n    return new Promise((resolve, reject) => {\n        zlib.gzip(data, (error, result) => {\n            if (error) {\n                reject(error);\n            }\n            else {\n                resolve(result);\n            }\n        });\n    });\n}\nclass ExtensibleError extends Error {\n}\n//# sourceMappingURL=ExpoClient.js.map"]},"metadata":{},"sourceType":"script"}